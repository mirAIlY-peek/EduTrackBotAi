import { Telegraf, Markup } from 'telegraf';
import { AttendanceService } from '../services/attendance.service';
import { ChatGPTService } from '../services/chatgpt.service';

export function setupCommands(bot: Telegraf) {
    const attendanceService = new AttendanceService();
    const chatGPTService = new ChatGPTService();

    const userSessions: Record<number, { login?: string; password?: string; formattedAttendance?: string }> = {};

    bot.start((ctx) => {
        ctx.reply(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å GPT. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:',
            Markup.keyboard([
                ['üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å', 'üîê –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
            ]).resize()
        );
    });

    bot.hears('üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (userSessions[userId]?.login && userSessions[userId]?.password) {
            try {
                const { login, password } = userSessions[userId];
                const attendance = await attendanceService.checkAttendance(login, password);
                const formattedAttendance = attendance.map(item => `${item.course}: ${item.attendance}`).join('\n');
                ctx.reply(`–í–∞—à–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:\n${formattedAttendance}`);

                // Store the formatted attendance in the user session
                userSessions[userId].formattedAttendance = formattedAttendance;
                ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ GPT. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:');
            } catch (error) {
                ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.');
            }
        } else {
            ctx.reply('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
            userSessions[userId] = {};
        }
    });

    bot.hears('üîê –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        delete userSessions[userId].login;
        delete userSessions[userId].password;
        ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    });

    bot.on('text', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        const session = userSessions[userId];

        if (!session) return;

        if (!session.login) {
            session.login = ctx.message.text;
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:');
            return;
        }

        if (!session.password) {
            session.password = ctx.message.text;
            ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }

        if (true) {
            // User has provided a query after receiving attendance data
            const query = ctx.message.text;
            try {
                const response = await chatGPTService.sendQuery(`${query}`);
                ctx.reply(response);
            } catch (error) {
                ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT.');
            }
            // Reset the formattedAttendance after using it
            session.formattedAttendance = "";
            return;
        }
    });
}
